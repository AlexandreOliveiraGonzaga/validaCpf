// FUNÇÃO PARA VALIDAR O CPF
function validaCpf (cpfEnviado){
    Object.defineProperty( this,'cpfLimpo', {
        enumerable: true,
        get : function(){
            return cpfEnviado.replace(/\D+/g,  ''); // CAMPO PARA RETIRAR PONTOS DOS NUMEROS DO CPF
        }
    })
};
validaCpf.prototype.valida =  function(){
    if (typeof this.cpfLimpo === 'undefined') return false;// NAO DIGITADO RETORNA FALSE
    if (this.cpfLimpo.length !== 11) return false;// FOR MAIS OU MENOS DE 11 NUMEROS FALSE
    if (this.isSequencia ()) return false; //SE A SEGUENCIA DE NUMEROS FOR IGUAL E FALSE (EX.111.111.111-11)

    const cpfParcial = this.cpfLimpo.slice (0 , -2);
    const digito1 = this.criaDigito ( cpfParcial);
    const digito2 = this.criaDigito ( cpfParcial + digito1);

    const novoCpf = cpfParcial + digito1 + digito2;
    return novoCpf === this.cpfLimpo;
};   
   
validaCpf.prototype.criaDigito = function(cpfParcial){
    const cpfArray = Array.from(cpfParcial);

    let regressivo = cpfArray.length +1;
    const total = cpfArray.reduce((ac,val) => {
        ac += (regressivo * Number(val)); //SOMANDO OS VALORES DO CPF --- NUMBER E PRA GARANTIA QUE DER NUMEROS
        regressivo --;
        return ac;
    }, 0);
    const digito = 11 - (total % 11);
    return digito > 9 ? '0' : String(digito); //GARANTIR QUE RETORNE NUMEROS STRING
}
    
validaCpf.prototype.isSequencia = function(){
    const sequencia = this.cpfLimpo[0].repeat(this.cpfLimpo.length);
    return sequencia === this.cpfLimpo;
};
const cpf = new validaCpf('070.987.720-03');

if(cpf.valida()){
    console.log('Cpf válido');
}else{
    console.log('Cpf Inválido');
}
